import React, { useState } from "react";
import "./App.css";

export default function App() {
  const [value, setValue] = useState();

  const [list, setList] = useState([]);
  const [name, setName] = useState("Josh Lithuan: "); //POSTAVITI IME

  const texting = (event) => {
    setValue(event.target.value);
  };

  function stopIt(event) {
    event.preventDefault();
    setList([...list, value]);

    setValue("");
  }

  console.log(list);

  const CHANNEL_ID = "ay6ECnaunFzRkgEf";

  const drone = new window.Scaledrone(CHANNEL_ID);

  drone.on("open", (error) => {
    if (error) {
      return console.error(error);
    }
    drone.publish({
      room: "myApp23",
      message: { message: value },
    });
  });

  const room = drone.subscribe("myApp23");
  room.on("open", (error) => {
    if (error) {
      console.error(error);
    } else {
      console.log("Connected to room");
    }
  });
  room.on("message", (message) => console.log(message));

  drone.on("error", (error) => console.error(error));

  return (
    <div className="theDisplay">
      <form onSubmit={stopIt}>
        <label>
          <input
            className="inputText"
            type="text"
            value={value}
            onChange={texting}
            placeholder="type"
          />
        </label>
        <button type="submit" className="botunDisplay" disabled={!value}>
          Sumbit
        </button>
      </form>
      {list.map((value, index) => (
        <div className="positioning" key={index}>
          {name}
          {value}
        </div>
      ))}
    </div>
  );
}

//2
//2
//2
//2
//2

import React, { useState } from "react";
import "./App.css";

export default function App() {
  const [value, setValue] = useState();

  const [list, setList] = useState([]);
  const [name, setName] = useState("Josh Lithuan: "); //POSTAVITI IME

  const texting = (event) => {
    setValue(event.target.value);
  };

  function stopIt(event) {
    event.preventDefault();
    setList([...list, value]);

    setValue("");
  }

  console.log(list);

  const CHANNEL_ID = "ay6ECnaunFzRkgEf";

  const drone = new window.Scaledrone(CHANNEL_ID);

  drone.on("open", (error) => {
    if (error) {
      return console.error(error);
    }
    drone.publish({
      room: "myApp23",
      message: { message: value },
    });
  });

  const room = drone.subscribe("myApp23");
  room.on("open", (error) => {
    if (error) {
      console.error(error);
    } else {
      console.log("Connected to room");
    }
  });
  room.on("message", (message) => console.log(message.data.message));

  drone.on("error", (error) => console.error(error));

  return (
    <div className="theDisplay">
      <form onSubmit={stopIt}>
        <label>
          <input
            className="inputText"
            type="text"
            value={value}
            onChange={texting}
            placeholder="type"
          />
        </label>
        <button type="submit" className="botunDisplay" disabled={!value}>
          Sumbit
        </button>
      </form>
      {list.map((value, index) => (
        <div className="positioning" key={index}>
          {name}
          {value}
        </div>
      ))}
    </div>
  );
}
import React, { useState } from "react";
import "./App.css";

export default function App() {
  const [value, setValue] = useState();

  const [list, setList] = useState([]);
  const [name, setName] = useState("Josh Lithuan: "); //POSTAVITI IME
  const [store, setStore] = useState([]);
  const texting = (event) => {
    setValue(event.target.value);
  };

  function stopIt(event) {
    event.preventDefault();
    setList([...list, value]);

    setValue("");
  }

  console.log(list);

  const CHANNEL_ID = "ay6ECnaunFzRkgEf";

  const drone = new window.Scaledrone(CHANNEL_ID);

  drone.on("open", (error) => {
    if (error) {
      return console.error(error);
    }
    drone.publish({
      room: "observable-myApp23",
      message: { message: value },
    });
  });

  const room = drone.subscribe("observable-myApp23");
  room.on("open", (error) => {
    if (error) {
      console.error(error);
    } else {
      console.log("Connected to room");
    }
  });

  room.on("message", (message) => console.log(message.data.message));
  //room.on("data", (message, member) => {
  //  if (member) {
  //    setStore(message, member);
  //  } else {
  //
  //  }
  //});
  drone.on("error", (error) => console.error(error));

  return (
    <div className="theDisplay">
      <form onSubmit={stopIt}>
        <label>
          <input
            className="inputText"
            type="text"
            value={value}
            onChange={texting}
            placeholder="type"
          />
        </label>
        <button type="submit" className="botunDisplay" disabled={!value}>
          Sumbit
        </button>
      </form>
      {list.map((value, index) => (
        <div className="positioning" key={index}>
          {name}
          {value}
        </div>
      ))}
    </div>
  );
}


//import React, { useState } from "react";
import "./App.css";

export default function App() {
  const [messages, setMessages] = useState([]);

  //INPUT INPUT INPUTINPUTINPUT INPUTINPUT INPUT INPUT INPUT INPUT INPUT
  const [input, setInput] = useState("");
  const onChange = (event) => {
    setInput(event.target.value);
  };
  const onSumbit = (event) => {
    event.preventDefault();
    setInput("");
  };
  console.log(input);
  //
  //
  //
  // CONNECT CONNECT CONNECT CONNECT CONNECT
  const CLIENT_ID = "1MOSLJAQfNkm8NXq";

  const drone = new window.ScaleDrone(CLIENT_ID, {
    data: "s", //member,
  });

  drone.on("open", (error) => {
    if (error) {
      return console.error(error);
    }
    console.log("Successfully connected to Scaledrone");

    //SUBSCRIBE
    const room = drone.subscribe("observable-room");
    room.on("open", (error) => {
      if (error) {
        return console.error(error);
      }
      console.log("Successfully joined room");
    });

    room.on("data", (text, member) => {
      //....
    });
  });

  drone.on("close", (event) => {
    console.log("Connection was closed", event);
  });

  drone.on("error", (error) => {
    console.error(error);
  });

  const onNewMessage = (message) => {
    drone.publish({
      room: "observable-room",
      message,
    });
  };
  //_______________________________________________________________________________________
  return (
    <div>
      <form onSubmit={onSumbit}>
        <input
          type="text"
          placeholder="message"
          onChange={onChange}
          value={input}
        />
        <button disabled={!input}>Sumbit</button>
      </form>
    </div>
  );
}


/css
/* Glavni DIV */
.theDisplay {
  position: relative;
  border: 2px solid black;

  margin: 0 auto;
  width: 980px;
  height: 900px;
}

/* pozicija inputa i botuna */
.botuniinput {
  position: relative;
  bottom: -90vh;
  right: -8vh;
}

/* input */
.inputText {
  border: 2px solid greenyellow;
  border-radius: 8px;
  height: 25px;
  width: 770px;
}
/* BOTUN */
.botun {
  background-color: greenyellow;
  color: blueviolet;
  border-radius: 10px;
  padding: 6px;
  margin: 3px;
}

/* Pozicija poruka */
.positioning {
  width: 820px;
}

/* prikaz poruka */

/* botun */

/* Poruke pozicionirati ih */
.position-messages {
  padding: 5px;
  border-radius: 8px;
  display: flex;
  flex-direction: column-reverse;
  margin: 8px;
  word-break: break-all;
  width: fit-content;
  max-width: 30vh;
  clear: right;
  float: right;
  background-color: red;
}

/*
*/
